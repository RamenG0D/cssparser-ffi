/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#ifndef __RUST_C_CSSPARSER__
#define __RUST_C_CSSPARSER__
#ifdef __cplusplus
extern "C" {
#endif

/** <No documentation available> */
typedef struct TokenValue TokenValue_t;


#include <stddef.h>
#include <stdint.h>

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct Vec_uint8 {
    /** <No documentation available> */
    uint8_t * ptr;

    /** <No documentation available> */
    size_t len;

    /** <No documentation available> */
    size_t cap;
} Vec_uint8_t;

/** <No documentation available> */
Vec_uint8_t
at_keyword (
    TokenValue_t const * value);

/** <No documentation available> */
Vec_uint8_t
bad_string (
    TokenValue_t const * value);

/** <No documentation available> */
Vec_uint8_t
bad_url (
    TokenValue_t const * value);

/** <No documentation available> */
Vec_uint8_t
comment (
    TokenValue_t const * value);

/** <No documentation available> */
/** \remark Has the same ABI as `uint8_t` **/
#ifdef DOXYGEN
typedef
#endif
enum TokenType {
    /** \brief
     *  A [`<ident-token>`](https://drafts.csswg.org/css-syntax/#ident-token-diagram)
     */
    TOKEN_TYPE_IDENT,
    /** \brief
     *  A [`<at-keyword-token>`](https://drafts.csswg.org/css-syntax/#at-keyword-token-diagram)
     *
     *  The value does not include the `@` marker.
     */
    TOKEN_TYPE_AT_KEYWORD,
    /** \brief
     *  A [`<hash-token>`](https://drafts.csswg.org/css-syntax/#hash-token-diagram) with the type flag set to "unrestricted"
     *
     *  The value does not include the `#` marker.
     */
    TOKEN_TYPE_HASH,
    /** \brief
     *  A [`<hash-token>`](https://drafts.csswg.org/css-syntax/#hash-token-diagram) with the type flag set to "id"
     *
     *  The value does not include the `#` marker.
     */
    TOKEN_TYPE_I_D_HASH,
    /** \brief
     *  A [`<string-token>`](https://drafts.csswg.org/css-syntax/#string-token-diagram)
     *
     *  The value does not include the quotes.
     */
    TOKEN_TYPE_QUOTED_STRING,
    /** \brief
     *  A [`<url-token>`](https://drafts.csswg.org/css-syntax/#url-token-diagram)
     *
     *  The value does not include the `url(` `)` markers.  Note that `url( <string-token> )` is represented by a
     *  `Function` token.
     */
    TOKEN_TYPE_UNQUOTED_URL,
    /** \brief
     *  A `<delim-token>`
     */
    TOKEN_TYPE_DELIM,
    /** \brief
     *  A [`<number-token>`](https://drafts.csswg.org/css-syntax/#number-token-diagram)
     */
    TOKEN_TYPE_NUMBER,
    /** \brief
     *  A [`<percentage-token>`](https://drafts.csswg.org/css-syntax/#percentage-token-diagram)
     */
    TOKEN_TYPE_PERCENTAGE,
    /** \brief
     *  A [`<dimension-token>`](https://drafts.csswg.org/css-syntax/#dimension-token-diagram)
     */
    TOKEN_TYPE_DIMENSION,
    /** \brief
     *  A [`<whitespace-token>`](https://drafts.csswg.org/css-syntax/#whitespace-token-diagram)
     */
    TOKEN_TYPE_WHITE_SPACE,
    /** \brief
     *  A comment.
     *
     *  The CSS Syntax spec does not generate tokens for comments,
     *  But we do, because we can (borrowed &str makes it cheap).
     *
     *  The value does not include the `/ *` `* /` markers.
     */
    TOKEN_TYPE_COMMENT,
    /** \brief
     *  A `:` `<colon-token>`
     */
    TOKEN_TYPE_COLON,
    /** \brief
     *  A `;` `<semicolon-token>`
     */
    TOKEN_TYPE_SEMICOLON,
    /** \brief
     *  A `,` `<comma-token>`
     */
    TOKEN_TYPE_COMMA,
    /** \brief
     *  A `~=` [`<include-match-token>`](https://drafts.csswg.org/css-syntax/#include-match-token-diagram)
     */
    TOKEN_TYPE_INCLUDE_MATCH,
    /** \brief
     *  A `|=` [`<dash-match-token>`](https://drafts.csswg.org/css-syntax/#dash-match-token-diagram)
     */
    TOKEN_TYPE_DASH_MATCH,
    /** \brief
     *  A `^=` [`<prefix-match-token>`](https://drafts.csswg.org/css-syntax/#prefix-match-token-diagram)
     */
    TOKEN_TYPE_PREFIX_MATCH,
    /** \brief
     *  A `$=` [`<suffix-match-token>`](https://drafts.csswg.org/css-syntax/#suffix-match-token-diagram)
     */
    TOKEN_TYPE_SUFFIX_MATCH,
    /** \brief
     *  A `*=` [`<substring-match-token>`](https://drafts.csswg.org/css-syntax/#substring-match-token-diagram)
     */
    TOKEN_TYPE_SUBSTRING_MATCH,
    /** \brief
     *  A `<!--` [`<CDO-token>`](https://drafts.csswg.org/css-syntax/#CDO-token-diagram)
     */
    TOKEN_TYPE_C_D_O,
    /** \brief
     *  A `-->` [`<CDC-token>`](https://drafts.csswg.org/css-syntax/#CDC-token-diagram)
     */
    TOKEN_TYPE_C_D_C,
    /** \brief
     *  A [`<function-token>`](https://drafts.csswg.org/css-syntax/#function-token-diagram)
     *
     *  The value (name) does not include the `(` marker.
     */
    TOKEN_TYPE_FUNCTION,
    /** \brief
     *  A `<(-token>`
     */
    TOKEN_TYPE_PARENTHESIS_BLOCK,
    /** \brief
     *  A `<[-token>`
     */
    TOKEN_TYPE_SQUARE_BRACKET_BLOCK,
    /** \brief
     *  A `<{-token>`
     */
    TOKEN_TYPE_CURLY_BRACKET_BLOCK,
    /** \brief
     *  A `<bad-url-token>`
     *
     *  This token always indicates a parse error.
     */
    TOKEN_TYPE_BAD_URL,
    /** \brief
     *  A `<bad-string-token>`
     *
     *  This token always indicates a parse error.
     */
    TOKEN_TYPE_BAD_STRING,
    /** \brief
     *  A `<)-token>`
     *
     *  When obtained from one of the `Parser::next*` methods,
     *  this token is always unmatched and indicates a parse error.
     */
    TOKEN_TYPE_CLOSE_PARENTHESIS,
    /** \brief
     *  A `<]-token>`
     *
     *  When obtained from one of the `Parser::next*` methods,
     *  this token is always unmatched and indicates a parse error.
     */
    TOKEN_TYPE_CLOSE_SQUARE_BRACKET,
    /** \brief
     *  A `<}-token>`
     *
     *  When obtained from one of the `Parser::next*` methods,
     *  this token is always unmatched and indicates a parse error.
     */
    TOKEN_TYPE_CLOSE_CURLY_BRACKET,
}
#ifndef DOXYGEN
; typedef uint8_t
#endif
TokenType_t;

/** <No documentation available> */
typedef struct Token {
    /** <No documentation available> */
    TokenType_t token_type;

    /** \brief
     *  This is an opaque pointer to the actual value of the token
     *  to get the value, you need to pass this to the appropriate function get_* function
     *  depending on the token type
     *  ```cpp
     *  switch (token.token_type) {
     *  case TokenType::Ident: {
     *  auto value = token.value.get_ident();
     *  } break;
     *  case TokenType::AtKeyword: {
     *  auto value = token.value.get_at_keyword();
     *  } break;
     *  etc...
     *  }
     *  ```
     */
    TokenValue_t * value;
} Token_t;

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct Vec_Token {
    /** <No documentation available> */
    Token_t * ptr;

    /** <No documentation available> */
    size_t len;

    /** <No documentation available> */
    size_t cap;
} Vec_Token_t;

/** <No documentation available> */
Vec_Token_t
css_parse (
    int8_t const * input);

/** <No documentation available> */
int8_t
delim (
    TokenValue_t const * value);


#include <stdbool.h>

/** <No documentation available> */
typedef struct Dimension {
    /** <No documentation available> */
    bool has_sign;

    /** <No documentation available> */
    float value;

    /** <No documentation available> */
    int32_t * int_value;

    /** <No documentation available> */
    Vec_uint8_t unit;
} Dimension_t;

/** <No documentation available> */
Dimension_t
dimension (
    TokenValue_t const * value);

/** <No documentation available> */
void
free_rstr (
    Vec_uint8_t value);

/** <No documentation available> */
Vec_uint8_t
function (
    TokenValue_t const * value);

/** <No documentation available> */
Vec_uint8_t
hash (
    TokenValue_t const * value);

/** <No documentation available> */
Vec_uint8_t
id_hash (
    TokenValue_t const * value);

/** <No documentation available> */
Vec_uint8_t
ident (
    TokenValue_t const * value);

/** <No documentation available> */
typedef struct Number {
    /** <No documentation available> */
    bool has_sign;

    /** <No documentation available> */
    float value;

    /** <No documentation available> */
    int32_t * int_value;
} Number_t;

/** <No documentation available> */
Number_t
number (
    TokenValue_t const * value);

/** <No documentation available> */
typedef struct Percentage {
    /** <No documentation available> */
    bool has_sign;

    /** <No documentation available> */
    float unit_value;

    /** <No documentation available> */
    int32_t * int_value;
} Percentage_t;

/** <No documentation available> */
Percentage_t
percentage (
    TokenValue_t const * value);

/** <No documentation available> */
Vec_uint8_t
quoted_string (
    TokenValue_t const * value);

/** <No documentation available> */
Vec_uint8_t
unquoted_url (
    TokenValue_t const * value);

/** <No documentation available> */
Vec_uint8_t
value_as_string (
    TokenValue_t const * value,
    TokenType_t token_type);

/** <No documentation available> */
Vec_uint8_t
whitespace (
    TokenValue_t const * value);


#ifdef __cplusplus
} /* extern \"C\" */
#endif

#endif /* __RUST_C_CSSPARSER__ */
